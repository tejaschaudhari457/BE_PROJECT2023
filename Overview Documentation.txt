Design and Implementation of Safety Features for Automotive using CAN Protocol


1. Project Overview:

1.1 Introduction:
This project aims to design and implement safety features for an automotive system using the Controller Area Network (CAN) protocol. The safety features integrated in this project include Tire Pressure Monitoring System (TPMS), Smoke and Fire Detection, and State of Charge (SOC) Monitoring for the vehicle’s battery. The system is designed to monitor critical vehicle parameters and alert the driver about potential safety hazards, ensuring a higher level of safety and reliability for the vehicle.


1.2 Objective:

The main objective of this project is to develop a system that:

Monitors tire pressure using TPMS sensors.

Detects smoke or fire in the battery compartment with smoke detectors.

Monitors the vehicle's battery health and state of charge (SOC) with current/voltage sensors.

Uses the CAN protocol to transmit this data to the vehicle's dashboard, providing real-time information to the driver for enhanced safety.

1.3 Benefits:

Improved vehicle safety by continuously monitoring critical parameters.

Early detection of potential hazards (e.g., tire failure, fire, or overheating) to prevent accidents.

Enhanced driver awareness with real-time data on the car dashboard.

Easy integration with existing CAN-enabled vehicle systems.


2. System Architecture:

2.1 Hardware Components:

Arduino Mega 2560: Central microcontroller for sensor data acquisition and CAN bus communication.

MCP2515 CAN Bus Module: Interface between Arduino and CAN bus for communication.

TPMS Sensors: Wireless sensors that monitor tire pressure.

MQ-2/MQ-7 Smoke Sensor: Detects smoke or hazardous gases, especially near the battery compartment.

DS18B20 Temperature Sensor: Monitors the temperature of the battery compartment.

INA219/ACS712 Current/Voltage Sensor: Monitors the vehicle's battery health and state of charge.

Car Dashboard (LCD/TFT): Displays real-time information about tire pressure, smoke, temperature, and SOC.

2.2 Software Components:

Arduino IDE: Platform for programming the Arduino Mega.

MCP_CAN Library: Library to enable communication with the MCP2515 CAN bus module.

Sensor Libraries: Libraries for interfacing with temperature sensors (DS18B20), smoke sensors (MQ series), and current/voltage sensors (INA219/ACS712).

CAN Bus Protocol Code: Custom code to send and receive data over the CAN bus.

Dashboard Code: Code for displaying the received data on a dashboard screen.

2.3 Communication Protocol:

The system communicates using the CAN protocol, a robust and efficient communication protocol for embedded systems, typically used in automotive applications. CAN enables reliable data transmission between the Arduino Mega and other CAN-enabled devices, such as the car dashboard.



3. System Design and Implementation:

3.1 Sensor Integration:

TPMS Sensors communicate wirelessly with the Arduino, which processes the tire pressure data and sends it to the CAN bus.

Smoke Sensors (MQ-2/MQ-7) monitor the air in the battery compartment and send any detected smoke or gas data to the Arduino.

Temperature Sensors (DS18B20) measure the temperature of the battery compartment and check for overheating.

SOC Monitoring is done using INA219/ACS712 sensors to measure the voltage and current in the battery, calculating the state of charge (SOC).

3.2 CAN Bus Communication:

The MCP2515 CAN Bus module allows the Arduino Mega to communicate with other CAN-enabled devices. The data from the sensors is formatted into CAN messages and transmitted to the dashboard. 

The dashboard reads these messages and displays the corresponding information (e.g., tire pressure, temperature, smoke warnings, battery status).

3.3 Dashboard:

A dashboard display (using an LCD or TFT display) is used to show the data received over the CAN bus. This allows the driver to see real-time information about the vehicle’s safety status, including tire pressure, temperature readings, and smoke detection alerts.



4. Testing and Results:

4.1 Testing Procedure:
The system was tested for each of the following:

TPMS Sensor Functionality: Testing the wireless communication of tire pressure data to the Arduino.

Smoke Sensor Response: Verifying the smoke detection ability of the MQ-2/MQ-7 sensors in a controlled environment.

Temperature Sensor Accuracy: Ensuring that the DS18B20 provides accurate temperature readings for the battery compartment.

SOC Monitoring: Confirming that the INA219/ACS712 sensors accurately report the state of charge of the battery.

4.2 Results:

The system successfully monitored tire pressure, temperature, and smoke, with data being transmitted over the CAN bus.

Real-time updates were displayed on the dashboard, and alerts were triggered when abnormal conditions were detected (e.g., low tire pressure, high temperature).


5. Issues and Challenges:

5.1 Sensor Integration:

Integrating wireless TPMS sensors and ensuring they communicate properly with the Arduino was a complex task, requiring proper error handling and communication protocols.

5.2 Power Consumption:

The sensors, especially the smoke and temperature sensors, consume continuous power. Proper power management, such as using low-power sensors and sleep modes for the microcontroller, was implemented to reduce power consumption.

5.3 Wireless Communication Interference:

There was occasional interference with the RF signals used by the TPMS sensors, which could cause data loss. Using high-quality wireless modules and implementing error-checking mechanisms helped mitigate this issue.



6. Future Scope:

6.1 Enhanced Wireless Communication:
Switching to Bluetooth Low Energy (BLE) or LoRa for longer-range and more reliable wireless communication between sensors and the Arduino can improve system performance.

6.2 Cloud Integration:
Integrating the system with cloud-based platforms for real-time monitoring, data analytics, and predictive maintenance can help improve the vehicle’s safety and performance over time.

6.3 Autonomous Vehicle Integration:
Integrating the system with autonomous driving software can provide real-time hazard detection and decision-making capabilities, improving vehicle safety during autonomous operation.

6.4 AI and Machine Learning:
Incorporating AI to analyze sensor data and predict potential failures (e.g., tire wear, battery health) can improve the system’s ability to prevent accidents before they occur.


7. Conclusion:
This project demonstrates the implementation of safety features for an automotive system using the CAN protocol. The integration of TPMS, smoke detection, temperature monitoring, and SOC monitoring contributes to enhancing the safety and reliability of vehicles. The system is scalable and can be extended to include additional safety features, with potential for future improvements in wireless communication, AI integration, and cloud-based monitoring.